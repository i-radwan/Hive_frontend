type: data

----------------
TO SERVER:
----------------

START: {
    mode: [SIMULATE|DEPLOY]
    state: state*
}

STOP: {}

PAUSE: {}

RESUME: {}

ORDER: {
    id:
    type: [REFILL|COLLECT]
    gate_id:
    rack_id:
    items: [
        {
            id:
            quantity:
        }
    ]
}

CONTROL: {
    type: [ACTIVATE|DEACTIVATE]
    id:
}

DONE: {
    id:                                 # The agent id
}

----------------
FROM SERVER:
----------------

ACK_START: {
    status: [OK|ERROR]
    msg: {                              # In the ERROR case
        id:
        args: []
    }
}

ACK_RESUME: {                           # TODO: unnecessarily, keeping it only for consistency.
    status: [OK|ERROR]
    msg: {                              # In the ERROR case
        id:
        args: []
    }
}

ACK_ORDER: {
    status: [OK|ERROR]
    msg: {                              # In the ERROR case
        id:
        args: []
    }
}

CONTROL: {
    type: [ACTIVATE|DEACTIVATE]
    id:
}

ACTION: {
    type: [STOP|MOVE|ROTATE_RIGHT|ROTATE_LEFT|RETREAT|LOAD|OFFLOAD|BIND|UNBIND],
    id:
}

LOG: {
    type: [TASK_ASSIGNED|TASK_COMPLETED|ORDER_FULFILLED|BATTERY_UPDATED]
    data: {...}
}

LOG: {
    type: TASK_ASSIGNED
    data: {
        order_id:
        robot_id:
        rack_id:
    }
}

LOG: {
    type: TASK_COMPLETED
    data: {
        order_id:
        robot_id:
        rack_id:
        items: [
            {
                id:
                quantity: [+ve|-ve]     # +ve to add into the rack
            }, {
                id:
                quantity: [+ve|-ve]
            }
        ]
    }
}

LOG: {
    type: ORDER_FULFILLED
    data: {
        id:
    }
}

LOG: {
    type: BATTERY_UPDATED
    data: {
        id:
        battery:                        # Level in [0, 9]
    }
}

MSG: {
    status: [INFO|ERROR]
    msg: {
        id:
        args: []
    }
}

----------------
TO GFX:
----------------
INIT: {
    width:
    height:
}

OBJECT_HOVER: {
    type: [MAP_CELL.GATE|MAP_CELL.ROBOT|...]
}

OBJECT_ADD: { # Default ROBOT direction = ROBOT_DIR.RIGHT
    type: [MAP_CELL.GATE|MAP_CELL.ROBOT|...]
    id:
    row:
    col:
}

OBJECT_DELETE: {
    type: [MAP_CELL.GATE|MAP_CELL.ROBOT|...]
    id:
    row:
    col:
}

OBJECT_DRAG: {
    type: [MAP_CELL.GATE|MAP_CELL.ROBOT|...]
    id:
    src_row:
    src_col:
    dst_row:
    dst_col:
}

OBJECT_MOVE: { # Move the specified robot and the bound rack (if any). Then send ACK when done
               # Move one step forward by the current direction
    id:        # not necessarily needed but to be more general
    row:
    col:
}

OBJECT_ROTATE_RIGHT: { # Move the specified robot and the bound rack (if any). Then send ACK when done
    id:        # not necessarily needed but to be more general
    row:
    col:
}

OBJECT_ROTATE_LEFT: { # Move the specified robot and the bound rack (if any). Then send ACK when done
    id:        # not necessarily needed but to be more general
    row:
    col:
}

OBJECT_RETREAT: { # Rotate the robot 180 degree, the move back to the previous position. Then send ACK when done
    id:        # not necessarily needed but to be more general
    row:
    col:
}

OBJECT_HIGHLIGHT: {
    type: [MAP_CELL.GATE|MAP_CELL.ROBOT|...]
    id:
    row:
    col:
}

OBJECT_COLORIZE: {
    type: [MAP_CELL.GATE|MAP_CELL.ROBOT|...]
    id:
    row:
    col:
    color:                                      # HTML
}

OBJECT_DECOLORIZE: {
    type: [MAP_CELL.GATE|MAP_CELL.ROBOT|...]
    id:
    row:
    col:
}

OBJECT_LED_COLORIZE: {
    type: [MAP_CELL.GATE|MAP_CELL.ROBOT|...]
    id:
    row:
    col:
    color:  [GFX_COLORS.LED_BLUE_COLOR|GFX_COLORS_DEFAULT.ROBOT_LED]
    mode: [LED_COLOR_MODE.ON|LED_COLOR_MODE.OFF|LED_COLOR_MODE.FLASH]
}

OBJECT_BIND: { # Flash the bound object, send ACK
    type:                                       # not necessarily needed
    id:                                         # Robot ID
    row:                                        # Robot row
    col:
    object_id:                                  # Bound object ID
    object_type: [MAP_CELL.GATE|MAP_CELL.STATION]
}

OBJECT_UNBIND: { # Send ACK
    type:                                       # not necessarily needed
    id:                                         # Robot ID
    row:                                        # Robot row
    col:
    object_id:                                  # Bound object ID
    object_type: [MAP_CELL.GATE|MAP_CELL.STATION]
}

OBJECT_LOAD: { # Draw rack on top of the robot, send ACK
    type:                                       # not necessarily needed
    id:                                         # Robot ID
    object_id:                                  # Rack ID
    object_type:                                # not necessarily needed
    row:                                        # Rack row
    col:
}

OBJECT_OFFLOAD: { # Send ACK
    type:                                       # not necessarily needed
    id:                                         # Robot ID
    object_id:                                  # Rack ID
    object_type:                                # not necessarily needed
    row:                                        # Rack row
    col:
}

OBJECT_FAILURE: { # Stop, Send ACK, Flash red
    type:                                       # not necessarily needed
    id:
    row:                                        # The old row/col (the one that this robot was
    col:                                        # supposed to be at before finishing the current move)
}

OBJECT_STOP: { # Force stop, Send ACK of the previous move
    type:                                       # not necessarily needed
    id:
    row:                                        # The old row/col (the one that this robot was
    col:                                        # supposed to be at before finishing the current move)
}

OBJECT_FIXED: { # Resume last move, Send ACK after finishing the original move
    type:                                       # not necessarily needed
    id:
    row:                                        # The old row/col (the one that this robot was
    col:                                        # supposed to be at before finishing the current move)
}

OBJECT_UPDATE: { # New status for the object (e.g. robot), such as the battery level
    type: [MAP_CELL.GATE|MAP_CELL.ROBOT|...]
    id:
    row:                                        # The old row/col (the one that this robot was
    col:                                        # supposed to be at before finishing the current move)
    battery:                                    # [0 - 10]
}

SIMULATION_START: {}

SIMULATION_PAUSE: {}

SIMULATION_RESUME: {}

SIMULATION_STOP: {}

SIMULATION_ESC: {}

----------------
FROM GFX:
----------------
CELL_CLICK: {
    type:
    id:
    row:
    col:
}

CELL_DRAG: {
    id:
    type:
    src_row:
    src_col:
    dst_row:
    dst_col:
}

CELL_DELETE: {
    id:
    type:
    row:
    col:
}

CELL_HOVER: {
    row:
    col:
}

ACK_ACTION: {
    type:                                       # Echo event type
    data:                                       # Echo event data
}

ESC: {
}

----------------
----------------
----------------

*state =

----------------
----------------
----------------
Note: all above constants have to match the front end constant.js file