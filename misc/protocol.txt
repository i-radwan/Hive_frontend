type: data

----------------
TO SERVER:
----------------

START: {
    mode: [SIMULATE|DEPLOY]
    state: state*
}

RESUME: {}

PAUSE: {}

STOP: {}

ORDER: {
    id:
    type: [REFILL|COLLECT]
    gate_id:
    rack_id:
    items: [
        {
            id:
            quantity:
        }
    ]
    start_timestep:                             # To support orders scheduling
}

ACK: {}

CONTROL: {
    ids: []
    type: [ACTIVATE|DEACTIVATE]
}

----------------
FROM SERVER:
----------------
ACK_START: {
    status: [OK|ERROR]
    msg: {                                      # In the ERROR case
        id:
        args: []
    }
}

ACK_RESUME: {
    status: [OK|ERROR]
    msg: {                                      # In the ERROR case
        id:
        args: []
    }
}

ACK_ORDER: {
    status: [OK|ERROR]
    msg: {                                      # In the ERROR case
        id:
        args: []
    }
}

UPDATE: {
    timestep:
    actions: [
        {
            type: [MOVE|ROTATE_RIGHT|ROTATE_LEFT|RETREAT|LOAD|OFFLOAD|BIND|UNBIND],
            data: {...}
        }, {  # Default ROBOT direction = ROBOT_DIR.RIGHT
            type: MOVE,
            data: {
                id
            }
        }, {
            type: ROTATE_RIGHT,
            data: {
                id:
            }
        }, {
            type: ROTATE_LEFT,
            data: {
                id:
            }
        }, {
            type: RETREAT,
            data: {
                id:
            }
        }, {
            type: LOAD,
            data: {
                id:
            }
        },
            type: OFFLOAD,
            data: {
                id:
            }
        }, {
            type: BIND,
            data: {
                id:
            }
        }, {
            type: UNBIND,
            data: {
                id:
            }
        }
    ],
    logs: [
        {
            type: [TASK_ASSIGNED|ITEM_DELIVERED|ORDER_FULFILLED|RACK_ADJUSTED|...]
            data: {...}
        }, {
            type: TASK_ASSIGNED
            data: {
                robot_id:
                rack_id:
            }
        }, {
            type: TASK_COMPLETED
            data: {
                order_id:
                rack_id:
                items: [
                    {
                        id:
                        quantity: [+ve|-ve]
                    }, {
                        id:
                        quantity: [+ve|-ve]
                    }
                ]
            }
        }, {
            type: ORDER_FULFILLED
            data: {
                id:
            }
        }, {
            type: BATTERY_UPDATED
            data: {
                id:
                battery:                        # Percentage
            }
         }
    ],
    statistics: [                               # All statistics at once
        {
            key:
            value:
        },
        {
            key:
            value:
        }
    ]
}

CONTROL: {
    blocked: []
    deactivated: []
    activated: []
}

MSG: {
    status: [INFO|ERROR]
    msg: {
        id:
        args: []
    }
}

----------------
TO GFX:
----------------
INIT: {
    width:
    height:
}

OBJECT_HOVER: {
    type: [MAP_CELL.GATE|MAP_CELL.ROBOT|...]
}

OBJECT_ADD: { # Default ROBOT direction = ROBOT_DIR.RIGHT
    type: [MAP_CELL.GATE|MAP_CELL.ROBOT|...]
    id:
    row:
    col:
}

OBJECT_DELETE: {
    type: [MAP_CELL.GATE|MAP_CELL.ROBOT|...]
    id:
    row:
    col:
}

OBJECT_DRAG: {
    type: [MAP_CELL.GATE|MAP_CELL.ROBOT|...]
    id:
    src_row:
    src_col:
    dst_row:
    dst_col:
}

OBJECT_MOVE: { # Move the specified robot and the bound rack (if any). Then send ACK when done
               # Move one step forward by the current direction
    id:        # not necessarily needed but to be more general
    row:
    col:
}

OBJECT_ROTATE_RIGHT: { # Move the specified robot and the bound rack (if any). Then send ACK when done
    id:        # not necessarily needed but to be more general
    row:
    col:
}

OBJECT_ROTATE_LEFT: { # Move the specified robot and the bound rack (if any). Then send ACK when done
    id:        # not necessarily needed but to be more general
    row:
    col:
}

OBJECT_RETREAT: { # Rotate the robot 180 degree, the move back to the previous position. Then send ACK when done
    id:        # not necessarily needed but to be more general
    row:
    col:
}

OBJECT_HIGHLIGHT: {
    type: [MAP_CELL.GATE|MAP_CELL.ROBOT|...]
    id:
    row:
    col:
}

OBJECT_COLORIZE: {
    type: [MAP_CELL.GATE|MAP_CELL.ROBOT|...]
    id:
    row:
    col:
    color:                                      # HTML
}

OBJECT_DECOLORIZE: {
    type: [MAP_CELL.GATE|MAP_CELL.ROBOT|...]
    id:
    row:
    col:
}

OBJECT_BIND: { # Flash the bound object, send ACK
    type:                                       # not necessarily needed
    id:                                         # Robot ID
    row:                                        # Robot row
    col:
    object_id:                                  # Bound object ID
    object_type: [MAP_CELL.GATE|MAP_CELL.STATION]
}

OBJECT_UNBIND: { # Send ACK
    type:                                       # not necessarily needed
    id:                                         # Robot ID
    row:                                        # Robot row
    col:
    object_id:                                  # Bound object ID
    object_type: [MAP_CELL.GATE|MAP_CELL.STATION]
}

OBJECT_LOAD: { # Draw rack on top of the robot, send ACK
    type:                                       # not necessarily needed
    id:                                         # Robot ID
    object_id:                                  # Rack ID
    object_type:                                # not necessarily needed
    row:                                        # Rack row
    col:
}

OBJECT_OFFLOAD: { # Send ACK
    type:                                       # not necessarily needed
    id:                                         # Robot ID
    object_id:                                  # Rack ID
    object_type:                                # not necessarily needed
    row:                                        # Rack row
    col:
}

OBJECT_FAILURE: { # Stop, Send ACK, Flash red
    type:                                       # not necessarily needed
    id:
    row:                                        # The old row/col (the one that this robot was
    col:                                        # supposed to be at before finishing the current move)
}

OBJECT_STOP: { # Force stop, Send ACK of the previous move
    type:                                       # not necessarily needed
    id:
    row:                                        # The old row/col (the one that this robot was
    col:                                        # supposed to be at before finishing the current move)
}

OBJECT_FIXED: { # Resume last move, Send ACK after finishing the original move
    type:                                       # not necessarily needed
    id:
    row:                                        # The old row/col (the one that this robot was
    col:                                        # supposed to be at before finishing the current move)
}

OBJECT_UPDATE: { # New status for the object (e.g. robot), such as the battery level
    type: [MAP_CELL.GATE|MAP_CELL.ROBOT|...]
    id:
    row:                                        # The old row/col (the one that this robot was
    col:                                        # supposed to be at before finishing the current move)
    battery:                                    # Percentage
}

SIMULATION_START: {}

SIMULATION_PAUSE: {}

SIMULATION_RESUME: {}

SIMULATION_STOP: {}

SIMULATION_ESC: {}

----------------
FROM GFX:
----------------
CELL_CLICK: {
    type:
    id:
    row:
    col:
}

CELL_DRAG: {
    id:
    type:
    src_row:
    src_col:
    dst_row:
    dst_col:
}

CELL_DELETE: {
    id:
    type:
    row:
    col:
}

CELL_HOVER: {
    row:
    col:
}

ACK_ACTION: {
    type:                                       # Echo event type
    data:                                       # Echo event data
}

ESC: {
}

----------------
----------------
----------------

*state =

----------------
----------------
----------------
Note: all above constants have to match the front end constant.js file